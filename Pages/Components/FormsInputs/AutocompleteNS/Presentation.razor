@using System.Net.Http.Json
@using MudBlazor.Demo.BW.Examples.Data.Models
@using System.Threading

@inject HttpClient httpClient

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="Element" Label="Periodic Table Element" @bind-Value="value1"
                         SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.Name} ({e.Sign})")" />
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="Element" Label="Periodic Table Element" @bind-Value="value2"
                         SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.Name} ({e.Sign})")">
            <ItemTemplate Context="e">
                <MudText>
                    <MudIcon Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" Class="mb-n1 mr-3" />@($"{e.Name} ({e.Sign})")
                </MudText>
            </ItemTemplate>
            <ItemSelectedTemplate Context="e">
                <MudText>
                    <MudIcon Icon="@Icons.Material.Filled.CheckBox" Class="mb-n1 mr-3" />@($"{e.Name} ({e.Sign})")
                </MudText>
            </ItemSelectedTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="Element" Label="Periodic Table Element" @bind-Value="value3"
                         SearchFunc="@Search" ItemDisabledFunc="@((Element e) => (e.Name.Contains("H")))" ToStringFunc="@(e=> e==null?null : $"{e.Name} ({e.Sign})")">
            <ItemDisabledTemplate>
                <MudText>Not available: @context.ToString()</MudText>
            </ItemDisabledTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs="12" md="12">
        <MudText Class="mb-n3" Typo="Typo.body2">
            Selected values: <MudChip T="string">@(value1?.ToString() ?? "Not selected")</MudChip><MudChip T="string">@(value2?.ToString() ?? "Not selected")</MudChip><MudChip T="string">@(value3?.ToString() ?? "Not selected")</MudChip>
        </MudText>
    </MudItem>
</MudGrid>

@code {
    private Element value1, value2, value3;

    private async Task<IEnumerable<Element>> Search(string value, CancellationToken token)
    {
        //return await httpClient.GetFromJsonAsync<List<Element>>($"webapi/periodictable/{value}", token);

        return (new List<Element>()
        {
            new Element
            {
                Number = 1,
                Sign = "H",
                Name = "Hydrogen",
                Position = 0,
                Molar = 1.00794,
            },
            new Element
            {
                Number = 2,
                Sign = "He",
                Name = "Helium",
                Position = 17,
                Molar = 4.002602,
            },
            new Element
            {
                Number = 3,
                Sign = "Li",
                Name = "Lithium",
                Position = 0,
                Molar = 6.941,
            },
            new Element
            {
                Number = 4,
                Sign = "Be",
                Name = "Beryllium",
                Position = 1,
                Molar = 9.012182,
            },
        }).Where(x => x.Name.Contains(value));
    }
}
