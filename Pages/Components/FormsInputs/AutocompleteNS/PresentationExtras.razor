@using System.Net.Http.Json
@using MudBlazor.Demo.BW.Examples.Data.Models
@using System.Threading
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="Element" Label="Periodic Table Element" @bind-Value="value1"
                         SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.Name} ({e.Sign})")">
            <MoreItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">
                    Only the first 10 items are shown
                </MudText>
            </MoreItemsTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="Element" Label="Periodic Table Element" @bind-Value="value2"
                         SearchFunc="@SearchEmpty" ToStringFunc="@(e=> e==null?null : $"{e.Name} ({e.Sign})")">
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">
                    No items found
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="Element" Label="Periodic Table Element" @bind-Value="value3"
                         SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.Name} ({e.Sign})")">
            <BeforeItemsTemplate>
                <MudText Color="Color.Primary" Class="px-4 py-1">Always Shows Before List</MudText>
            </BeforeItemsTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="Element" Label="Periodic Table Element" @bind-Value="value4"
                         SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.Name} ({e.Sign})")">
            <AfterItemsTemplate>
                <div class="pa-2">
                    <MudButton Color="Color.Primary">Add Item(does nothing)</MudButton>
                </div>
            </AfterItemsTemplate>
        </MudAutocomplete>
    </MudItem>
</MudGrid>

@code {
    private Element value1, value2, value3, value4;

    private async Task<IEnumerable<Element>> Search(string value, CancellationToken token)
    {
        //return await httpClient.GetFromJsonAsync<List<Element>>($"webapi/periodictable/{value}", token);

        return (new List<Element>()
        {
            new Element
            {
                Number = 1,
                Sign = "H",
                Name = "Hydrogen",
                Position = 0,
                Molar = 1.00794,
            },
            new Element
            {
                Number = 2,
                Sign = "He",
                Name = "Helium",
                Position = 17,
                Molar = 4.002602,
            },
            new Element
            {
                Number = 3,
                Sign = "Li",
                Name = "Lithium",
                Position = 0,
                Molar = 6.941,
            },
            new Element
            {
                Number = 4,
                Sign = "Be",
                Name = "Beryllium",
                Position = 1,
                Molar = 9.012182,
            },
        }).Where(x => x.Name.Contains(value));
    }

    private async Task<IEnumerable<Element>> SearchEmpty(string value, CancellationToken token)
    {
        await Task.Delay(5, token);
        return Array.Empty<Element>();
    }
}